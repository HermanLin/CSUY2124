/* 
    hw07.cpp
    Herman Lin
*/

#include <iostream>
#include <string>
#include <vector>
using namespace std;



//=============//
/* TESTER CODE */
//=============//
int main() {
    cout << "testing" << endl;
    // Lord sam("Sam");
    // Archer samantha("Samantha", 200);
    // sam.hires(samantha);

    // Lord joe("Joe");
    // PersonWithStrengthToFight randy("Randolf the Elder", 250); 	

    // joe.battle(randy);	
    // joe.battle(sam);	

    // Lord janet("Janet");	
    // Swordsman hardy("TuckTuckTheHardy", 100);
    // Swordsman stout("TuckTuckTheStout", 80);
    // janet.hires(hardy);	
    // janet.hires(stout);	

    // PersonWithStrengthToFight barclay("Barclay the Bold", 300);	
    // janet.battle(barclay);	
    // janet.hires(samantha);	

    // Archer pethora("Pethora", 50);	
    // Archer thora("Thorapleth", 60);
    // Wizard merlin("Merlin", 150);

    // janet.hires(pethora);
    // janet.hires(thora);
    // sam.hires(merlin);
    
    // janet.battle(barclay);	
    // sam.battle(barclay);	
    // joe.battle(barclay);
}



//============================//
/* NOBLES CLASS FUNCTIONALITY */
//============================//
Nobles::Nobles (const string& name)
    : name(name), dead(false)
{}


bool Nobles::isDead() const { return dead; }

//==========================//
/* LORD CLASS FUNCTIONALITY */
//==========================//
Lord::Lord (const string& name)
    : Nobles(name)
{}

bool Lord::hires(Protectors& mercenary) {
    // if the Noble is deadd...
    if (isDead()) { return false; }
    // if the Protector already has a boss...
    else if (mercenary.getBoss()) { return false; }
    else {
        mercenary.setBoss(this);
        army.push_back(&mercenary);
        return true;
    }
}

//===============================================//
/* PERSONWITHSTRENGTHTOFIGHT CLASS FUNCTIONALITY */
//===============================================//
PersonWithStrengthToFight::PersonWithStrengthToFight (const string& name, const double strength)
    : Nobles(name), strength(strength)
{}

//================================//
/* PROTECTORS CLASS FUNCTIONALITY */
//================================//
Protectors::Protectors (const string& name, const double strength)
    : name(name), strength(strength)
{}

Nobles* Protectors::getBoss() const { return boss; }

void Protectors::setBoss(Nobles* newBoss) { boss = newBoss; }

//============================//
/* WIZARD CLASS FUNCTIONALITY */
//============================//
Wizard::Wizard (const string& name, const double strength)
    : Protectors(name, strength)
{}

//==============================//
/* WARRIORS CLASS FUNCTIONALITY */
//==============================//
Warriors::Warriors (const string& name, const double strength)
    : Protectors(name, strength)
{}

//============================//
/* ARCHER CLASS FUNCTIONALITY */
//============================//
Archer::Archer (const string& name, const double strength)
    : Warriors(name, strength)
{}

//===============================//
/* SWORDSMAN CLASS FUNCTIONALITY */
//===============================//
Swordsman::Swordsman (const string& name, const double strength)
    : Warriors(name, strength)
{}